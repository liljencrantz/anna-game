#! /usr/bin/env anna

use(annaGame);
use(annaGame.scene);
use(linalg);

def Float time()
{
  tv := unix.time.Timeval();
  tz := unix.time.Timezone();
    unix.time.gettimeofday(tv, tz);
    return tv.sec + 0.000001* tv.usec; 
}

type Stepable
{
    def Object step(Float dt){};
}

type World
{
    
    var Scene scene;
    
    var MutableList«Actor» actor;
    var MutableList«Stepable» stepable;
    var Actor _player;
    var Float time;
    
    def __init__(Scene scene)
    {
	this.scene = scene;
	actor = «Actor»[];
	stepable = «Stepable»[];
	time = 0.0;
    }
    
    def playerGetter()
    {
	_player;
    }
    
    def playerSetter(Actor player)
    {
	_player = player;
    }
    
    var Actor player (property(playerGetter, playerSetter));

    def add(Object o)
    {
	expandCode(
	    if(o as %Type)
	    {
		%list.push(o as %Type);
	    }
	    ,
	    Type: [Actor, Stepable],
	    list: [actor, stepable]);
    }
    
    def step(Float dt)
    {
	time += dt;
	stepable.each(it)
	{
	    it.step(dt);
	}
	
	
    }

    def cameraSetter(List«Float» val)
    {
	scene.cameraX = val[0];
	scene.cameraY = val[1];
	scene.cameraZ = val[2];
    }

    def cameraGetter()
    {
	[scene.cameraX, scene.cameraY, scene.cameraZ]
    }

    var List«Float» camera (property(cameraGetter, cameraSetter));

}

type ActorData
{
    var Float turnSpeed;
    var Float walkSpeed;

    def __init__(Float turnSpeed, Float walkSpeed)
    {
	expandCode(
	    this.%name = %name,
	    name: [turnSpeed, walkSpeed]);
    }
}

enum Action
{
    walkForward,
    walkBackward,
    turnLeft,
    turnRight,
}

type Actor
{
    var World world;
    
    var Vec3 pos;
    var Vec3 vel;
    var Transform transform;
    var Float angle;
    
    var String name;
    
    var ActorData data;
    var Buffer action;
    
    def __init__(
	World world, ActorData data, String name, 
	Vec3 pos = ?, Vec3 vel = ?, Float angle=?, 
	Transform transform=?)
    {
	this.world = world;
	expandCode(
	    this.%name = %name or %init,
	    name:[pos, vel, transform, name, data, angle],
	    init: [Vec3(0.0, 0.0, 0.0), Vec3(0.0, 0.0, 0.0), Transform(), "", ?, 0.0]
	    );
	world.add(this);
	action = Buffer();
	angle = 0.0;
    }

    def Float turnSpeed() (property)
    {
	data.turnSpeed;
    }
    
    def Float walkSpeed() (property)
    {
	data.walkSpeed;
    }

    def __set__(Action action, Object val)
    {
	this.action[action.__value] = if(val){1}else{0};
    }
    
    def __get__(Action action)
    {
	if(this.action[action.__value]==1){1}else{?};
    }
    
    def Object step(Float dt){
	if(this[Action::turnLeft])
	{
	    angle += dt*turnSpeed;
	    if(angle >= 360)
	    {
		angle -= 360;
	    }
	}
	
	if(this[Action::turnRight])
	{
	    angle -= dt*turnSpeed;
	    if(angle < 0)
	    {
		angle += 360;
	    }
	}	

	print(angle, "\n");
	
    };

}

def handleInput(World w)
{
    use(annaGame.screen);
    p := w.player;
    expandCode(
	p[Action::%action] = keyGet(key.%key),
	action: [walkForward, walkBackward, turnLeft, turnRight],
	key: [up, down, left, right]);
}

def main()
{
    screen.init(640, 480, 0);
    render.init();
    w := World(scene.Scene("anna", 1));
    
    w.player = Actor(w, ActorData(250.0, 8.0), "Bengt");
    
//    print("AAA", primitives.ballTypeLoad("anna","ball1"), "\n");
    w.scene.cameraZ = 3.0;
    w.scene.cameraX  = 40.0;
    w.scene.cameraY  = 40.0;

    prev := time();
    framerate := 30.0;
    i := 1;
    while(1)
    {
        tm := time();
        dt := tm -prev;
	framerate = 0.95 * framerate + 0.05/dt;
	
	if(i ^mod 300 == 0)
	{
	    print("Framerate is % fps\n" % [framerate]);
	}
	    
	use(screen);
	screen.checkInput();
	if(screen.keyGet(key.escape) != 0)
	{
	    break;
	}

	handleInput(w);

	w.step(dt);
	w.scene.cameraX += dt;
	w.scene.cameraZ = w.scene.getHeight(w.scene.cameraX, w.scene.cameraY)+3.0;
	w.scene.cameraAngle += 0.05;
	w.scene.render();
	screen.swapBuffers();
	prev = tm;
	i++;
    }
    
}

