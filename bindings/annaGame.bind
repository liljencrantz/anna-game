
include(
    "\"screen.h\"", "\"scene.h\"", "\"render.h\"", 
    "\"GL/glew.h\"", "\"GL/glu.h\"", "\"SDL/SDL.h\""
);

screen
{
    key
    {
	const Int escape (name(SDLK_ESCAPE));
    }

    def Void init(Int width, Int height, Int fullscreen) (name(screen_init));
    def Void checkInput() (name(screen_check_input));
    def Int keyGet(Int key) (name(screen_key_get));
    def Void destroy() (name(screen_destroy));
    def Void swapBuffers() (name(screen_swap_buffers));
}

render
{
    def Void init() (name(render_init));
}

scene
{

    cStruct Scene (name(scene))
    {
	const Float sceneSize (name(scene_size));
	const Double time;
	const Float renderQuality (name(render_quality));
	
	def Void __init__(String name, Int load) (name(scene_init));
	def Void configure(Int tileLevels, Float size) (name(scene_configure));

	def Void saveTerrain() (name(scene_save_terrain));
	def Void render();
	def Void update() (name(scene_update));
	
    }
}

primitives
{
    cStructPointer BallType (name(ball_type))
    {
 
	const Int levels;
	const Int alpha;

//	def Void calc() (name(ball_calc));
//	def Void set(Int x, Int y, Float height, Float red, Float green, Float blue) (name(ball_type_set));

	def Void save(String directory, String name) (name(ball_type_save));     

    }

    def BallType ballTypeLoad(String directory, String name) (name(ball_type_load));
//    def BallType ballTypeCreate(Int level, String name, Int alpha, XXX alloc) (name(ball_type_create));    

    cStruct Ball (name(ball))
    {
	var Float scale;
	const BallType ballType (name(type));
	var Float radius;
	var Int visible;
    }
  
    
}

